{"version":3,"sources":["App.jsx","index.js"],"names":["Coord","lat","lon","this","App","useState","coords","setCoords","TestForm","props","state","inputText","handleFormSubmit","bind","e","preventDefault","newCoords","split","forEach","i","temp","length","filter","coord","document","querySelector","click","onSubmit","type","value","onChange","setState","target","React","Component","label","filename","exportFile","stringFile","createGpx","ReactDOM","render","StrictMode","getElementById"],"mappings":"uPAKMA,EAEJ,WAAaC,EAAKC,GAAM,oBACtBC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GAMA,SAASE,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAIMC,EALsB,kDAM1B,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAW,IAE1B,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAJP,EANO,oDAa1B,SAAiBC,GAEfA,EAAEC,iBAEF,IAAIC,EAAY,GAEhBb,KAAKO,MAAMC,UAAUM,MAAM,QAAQC,SAAQ,SAAAC,GAE1BA,EAAEF,MAAM,UAGdC,SAAQ,SAAAC,GAGf,GAAS,KAANA,EAAU,CAEX,IAAIC,EAAOD,EAAEF,MAAM,MAAM,GAIzBG,GAFAA,EAAOA,EAAKH,MAAM,MAENI,OAAS,EAAID,EAAK,GAAKA,EAAK,GAExCJ,EAAS,sBAAOA,GAAP,CAAkBI,WAOjCJ,EAAYA,EAAUM,QAAO,SAAAH,GAAC,OAAIA,EAAEE,OAAS,KAE7C,IAAID,EAAO,GAEXJ,EAAUE,SAAQ,SAAAC,GAEhB,IAAII,EAAQJ,EAAEF,MAAM,KAEpBG,EAAI,sBAAOA,GAAP,CAAa,IAAIpB,EAAMuB,EAAM,GAAIA,EAAM,SAK7ChB,EAAUa,GAEVI,SAASC,cAAc,KAAKC,UAzDJ,oBA8D1B,WAAU,IAAD,OACP,OACE,mCACE,uBAAMC,SAAW,SAAAb,GAAC,OAAI,EAAKF,iBAAiBE,IAA5C,UACE,uBAAOc,KAAK,OAAOC,MAAQ1B,KAAKO,MAAMC,UAAYmB,SAAW,SAAChB,GAAQ,EAAKiB,SAAS,CAAEpB,UAAWG,EAAEkB,OAAOH,WAC1G,uBAAOD,KAAK,SAASC,MAAM,2BAnET,GAKLI,IAAMC,WA0G7B,OACE,qCACA,cAAC1B,EAAD,IACA,cAAC,IAAD,CACE2B,MAAM,GACNC,SAAS,cACTC,WAAa,kBApCC,WAChB,IAAIC,EAAa,GAcjB,OAbAA,GAAc,4DACdA,GAAc,UACdA,GAAc,UACdA,GAAc,aAGd,YAAIhC,GAAQY,SAAQ,SAAAC,GAClBmB,GAAU,sBAAmBnB,EAAElB,IAArB,kBAAkCkB,EAAEjB,IAApC,mBAGZoC,GAAU,cACVA,GAAU,WACVA,GAAU,WAsBWC,SChIzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,W","file":"static/js/main.089227c9.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react'\nimport DownloadLink from 'react-download-link';\n\n// eslint-disable-next-line\nclass Coord {\n\n  constructor (lat, lon) {\n    this.lat = lat\n    this.lon = lon\n  }\n}\n\n\n\nexport default function App() {\n  const [coords, setCoords] = useState([])\n    \n  /* <Components/> */\n\n  class TestForm extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { inputText: \"\"}\n\n      this.handleFormSubmit = this.handleFormSubmit.bind(this)\n    }\n\n    handleFormSubmit(e) {\n\n      e.preventDefault()\n      \n      let newCoords = []\n  \n      this.state.inputText.split(\"min \").forEach(i => {\n\n        let splitSet = i.split(\"- Set \")\n\n\n        splitSet.forEach(i => {\n\n\n          if(i !== \"\") {\n\n            let temp = i.split(\", \")[0]\n\n            temp = temp.split(\" \")\n\n            temp = temp.length > 1 ? temp[1] : temp[0]\n\n            newCoords = [...newCoords, temp]\n\n\n          }\n        })\n      })\n  \n      newCoords = newCoords.filter(i => i.length > 3)\n  \n      let temp = []\n  \n      newCoords.forEach(i => {\n\n        let coord = i.split(\",\") \n\n        temp = [...temp, new Coord(coord[0], coord[1])]\n\n      })\n      \n  \n      setCoords(temp)\n\n      document.querySelector(\"a\").click()\n\n    }\n\n\n    render() {\n      return(\n        <>\n          <form onSubmit={ e => this.handleFormSubmit(e) }>\n            <input type=\"text\" value={ this.state.inputText } onChange={ (e) => { this.setState({ inputText: e.target.value })} }/>\n            <input type=\"submit\" value=\"Get .gpx file\"/>\n          </form>\n        </>\n      )\n    }\n\n  }\n\n\n\n\n\n  /* <Components/> */\n\n  const createGpx = () => {\n    let stringFile = \"\";\n    stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n'\n    stringFile += '<gpx>\\n'\n    stringFile += '<trk>\\n'\n    stringFile += '<trkseg>\\n';\n    \n\n    [...coords].forEach(i => {\n      stringFile += `<trkpt lat=\"${i.lat}\" lon=\"${i.lon}\"></trkpt>\\n`;\n    })\n\n    stringFile += `</trkseg>\\n`\n    stringFile += `</trk>\\n`\n    stringFile += `</gpx>\\n`\n    return stringFile;\n  }\n\n  // const copyToClipboard = (text) => {\n  //   let textField = document.createElement('textarea')\n  //   textField.innerText = text\n  //   document.body.appendChild(textField)\n  //   textField.select()\n  //   document.execCommand('copy')\n  //   textField.remove()\n    \n  // }\n  \n\n\n  return (\n    <>\n    <TestForm/>\n    <DownloadLink\n      label=\"\"\n      filename=\"pokemon.gpx\"\n      exportFile={ () => createGpx() }\n\n    />\n    {/* <button onClick={ e => console.log(coords) }>Print coords</button> */}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}