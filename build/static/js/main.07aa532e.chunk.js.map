{"version":3,"sources":["App.jsx","index.js"],"names":["Coord","lat","lon","this","App","useState","questInput","setQuestInput","coords","setCoords","downloadGpx","useRef","handleQuestSubmit","e","preventDefault","newCoords","split","forEach","i","temp","length","filter","coord","current","click","alert","onSubmit","type","value","onChange","target","onClick","ref","style","visibility","text","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","stringFile","createGpx","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMAIMA,EAEJ,WAAaC,EAAKC,GAAM,oBACtBC,KAAKF,IAAMA,EACXE,KAAKD,IAAMA,GAqFAE,MA/Ef,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAcC,mBA8BdC,EAAoB,SAAAC,GACxBA,EAAEC,iBAEF,IAAIC,EAAY,GAEhBT,EAAWU,MAAM,QAAQC,SAAQ,SAAAC,GAChBA,EAAEF,MAAM,UACdC,SAAQ,SAAAC,GACf,GAAS,KAANA,EAAU,CACX,IAAIC,EAAOD,EAAEF,MAAM,MAAM,GAEzBG,GADAA,EAAOA,EAAKH,MAAM,MACNI,OAAS,EAAID,EAAK,GAAKA,EAAK,GACxCJ,EAAS,sBAAOA,GAAP,CAAkBI,WAKjCJ,EAAYA,EAAUM,QAAO,SAAAH,GAAC,OAAIA,EAAEE,OAAS,KAE7C,IAAID,EAAO,GAEXJ,EAAUE,SAAQ,SAAAC,GAChB,IAAII,EAAQJ,EAAEF,MAAM,KACpBG,EAAI,sBAAOA,GAAP,CAAa,IAAInB,EAAMsB,EAAM,GAAIA,EAAM,SAI7Cb,EAAUU,GACVT,EAAYa,QAAQC,QACpBC,MAAM,YAKR,OACE,qCACA,uBAAMC,SAAWd,EAAjB,UACE,uBAAOe,KAAK,OAAOC,MAAQtB,EAAauB,SAAU,SAAChB,GAAQN,EAAcM,EAAEiB,OAAOF,UAClF,uBAAOD,KAAK,SAASC,MAAM,gBAAgBG,QAAU,SAAAlB,GAAOD,EAAkBC,SAEhF,wBAAQmB,IAAKtB,EAAcuB,MAAO,CAAEC,WAAY,UAAYH,QAAU,YAlDhD,SAACI,GACvB,IAAIC,EAAYC,SAASC,cAAc,YACvCF,EAAUG,UAAYJ,EACtBE,SAASG,KAAKC,YAAYL,GAC1BA,EAAUM,SACVL,SAASM,YAAY,QACrBP,EAAUQ,SA4CoEC,CApE9D,WAChB,IAAIC,EAAa,GAcjB,OAbAA,GAAc,4DACdA,GAAc,UACdA,GAAc,UACdA,GAAc,aAGd,YAAItC,GAAQS,SAAQ,SAAAC,GAClB4B,GAAU,sBAAmB5B,EAAEjB,IAArB,kBAAkCiB,EAAEhB,IAApC,mBAGZ4C,GAAU,cACVA,GAAU,WACVA,GAAU,WAsDoFC,KAA9F,qBCnFJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,W","file":"static/js/main.07aa532e.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from 'react'\n\n// eslint-disable-next-line\nclass Coord {\n\n  constructor (lat, lon) {\n    this.lat = lat\n    this.lon = lon\n  }\n}\n\n\n\nfunction App() {\n  const [questInput, setQuestInput] = useState(\"\");// eslint-disable-next-line\n  const [coords, setCoords] = useState([])\n  const downloadGpx = useRef();\n    \n  const createGpx = () => {\n    let stringFile = \"\";\n    stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n'\n    stringFile += '<gpx>\\n'\n    stringFile += '<trk>\\n'\n    stringFile += '<trkseg>\\n';\n    \n\n    [...coords].forEach(i => {\n      stringFile += `<trkpt lat=\"${i.lat}\" lon=\"${i.lon}\"></trkpt>\\n`;\n    })\n\n    stringFile += `</trkseg>\\n`\n    stringFile += `</trk>\\n`\n    stringFile += `</gpx>\\n`\n    return stringFile;\n  }\n\n  const copyToClipboard = (text) => {\n    let textField = document.createElement('textarea')\n    textField.innerText = text\n    document.body.appendChild(textField)\n    textField.select()\n    document.execCommand('copy')\n    textField.remove()\n    \n  }\n  \n  const handleQuestSubmit = e => {\n    e.preventDefault()\n    \n    let newCoords = []\n\n    questInput.split(\"min \").forEach(i => {\n      let splitSet = i.split(\"- Set \")\n      splitSet.forEach(i => {\n        if(i !== \"\") {\n          let temp = i.split(\", \")[0]\n          temp = temp.split(\" \")\n          temp = temp.length > 1 ? temp[1] : temp[0]\n          newCoords = [...newCoords, temp]\n        }\n      })\n    })\n\n    newCoords = newCoords.filter(i => i.length > 3)\n\n    let temp = []\n\n    newCoords.forEach(i => {\n      let coord = i.split(\",\") \n      temp = [...temp, new Coord(coord[0], coord[1])]\n    })\n    \n\n    setCoords(temp)\n    downloadGpx.current.click()\n    alert(\"Copied!\")\n\n  }\n\n\n  return (\n    <>\n    <form onSubmit={ handleQuestSubmit }>\n      <input type=\"text\" value={ questInput } onChange={(e) => { setQuestInput(e.target.value) }}/>\n      <input type=\"submit\" value=\"Get .gpx file\" onClick={ e => { handleQuestSubmit(e) }}/>\n    </form>\n    <button ref={downloadGpx}  style={{ visibility: \"hidden\" }} onClick={ () => { copyToClipboard(createGpx()) } }>Eyo</button>\n    {/* <button onClick={ e => console.log(coords) }>Print coords</button> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}