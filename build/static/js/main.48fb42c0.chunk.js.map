{"version":3,"sources":["App.jsx","index.js"],"names":["distance","coord1","coord2","a","unit","split","lat1","lon1","lat2","lon2","parseFloat","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","url","questUrl","fetch","res","json","sortQuests","quests","Error","toString","pop","list","index","popped","temp","length","i","done","filter","coord","chose","obj","lat","lng","at","elemDist","indexOf","console","log","questCreateGpx","coords","stringFile","forEach","GetQuest","props","downloadFile","file","blob","Blob","fileDownloadUrl","URL","createObjectURL","setState","dofileDownload","click","revokeObjectURL","state","handleGetQuest","quest","alert","fetchQuest","then","className","name","value","hidden","urls","map","onClick","e","target","rewards","label","category","j","literal","reward","style","display","download","href","this","ref","React","Component","ConvertToGpx","inputText","handleFormSubmit","bind","parseCoords","lon","createGpx","text","matchAll","preventDefault","onSubmit","type","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48fb42c0.chunk.js","sourcesContent":["import \"./App.css\";\nimport { rewards, urls } from \"./bundle.json\";\nimport React from \"react\";\n\nasync function distance(coord1, coord2, unit = \"K\") {\n  let [lat1, lon1] = coord1.split(\",\");\n  let [lat2, lon2] = coord2.split(\",\");\n  lat1 = parseFloat(lat1);\n  lon1 = parseFloat(lon1);\n  lat2 = parseFloat(lat2);\n  lon2 = parseFloat(lon2);\n\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } else {\n    var radlat1 = (Math.PI * lat1) / 180;\n    var radlat2 = (Math.PI * lat2) / 180;\n    var theta = lon1 - lon2;\n    var radtheta = (Math.PI * theta) / 180;\n    var dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    if (unit === \"K\") {\n      dist = dist * 1.609344;\n    }\n    if (unit === \"N\") {\n      dist = dist * 0.8684;\n    }\n    return dist;\n  }\n}\n\nasync function fetchQuest(url, questUrl) {\n  try {\n    let res = await fetch(\n      \"https://cors-anywhere.herokuapp.com/\" + url + questUrl,\n      { \"x-requested-with\": \"fetch\" }\n    );\n    res = await res.json();\n    return await sortQuests(res.quests);\n  } catch (err) {\n    throw new Error(err.toString() + \" fetchQuest()\");\n  }\n}\n\nasync function sortQuests(quests) {\n  function pop(list, index) {\n    let temp = [];\n    let popped;\n    if (index === -1) {\n      index = list.length - 1;\n    }\n\n    for (let i = 0; i < list.length; i++) {\n      if (i !== index) {\n        temp = [...temp, list[i]];\n      } else {\n        popped = list[i];\n      }\n    }\n    if (!popped)\n      throw new Error(\n        `index not valid. sortQuests.pop() actual length: ${quests.length}, index given: ${index}`\n      );\n    return [temp, popped];\n  }\n\n  if (quests.length === 0) return \"No quests specified. sortQuests()\";\n\n  let done = [];\n  let popped;\n\n  [quests, popped] = pop(quests, 0);\n  done[0] = popped;\n\n  quests = quests.filter((i) => i !== popped);\n\n  let coord = [];\n\n  while (quests.length > 0) {\n    let temp = [{ chose: null }];\n    let dist = 1000000000;\n    let obj = null;\n    for (let i of quests) {\n      let elemDist = await distance(\n        i.lat + \",\" + i.lng,\n        done.at(-1).lat + \",\" + done.at(-1).lng\n      );\n      temp = [...temp, elemDist];\n\n      if (elemDist < dist) {\n        temp[0].chose = elemDist;\n        dist = elemDist;\n        obj = i;\n      }\n    }\n    coord = [...coord, temp];\n\n    [quests, popped] = pop(quests, quests.indexOf(obj));\n    done = [...done, popped];\n  }\n  console.log(coord);\n  return done;\n}\n\nfunction questCreateGpx(coords) {\n  let stringFile = \"\";\n  stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n';\n  stringFile += \"<gpx>\\n\";\n  stringFile += \"<trk>\\n\";\n  stringFile += \"<trkseg>\\n\";\n\n  coords.forEach((i) => {\n    stringFile += `<trkpt lat=\"${parseFloat(i.lat)}\" lon=\"${parseFloat(\n      i.lng\n    )}\"></trkpt>\\n`;\n  });\n\n  stringFile += `</trkseg>\\n`;\n  stringFile += `</trk>\\n`;\n  stringFile += `</gpx>\\n`;\n  return stringFile;\n}\n\n\n\n// fetch(\"https://cors-anywhere.herokuapp.com/https://nycpokemap.com/quests.php\", { \"x-requested-with\": \"fetch\" })\n// component\nclass GetQuest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      url: \"\",\n      quest: \"\",\n      fileDownloadUrl: \"\",\n    };\n  }\n\n  downloadFile = (file) => {\n    const blob = new Blob([ questCreateGpx(file) ]);\n    const fileDownloadUrl = URL.createObjectURL(blob);\n    this.setState({ fileDownloadUrl: fileDownloadUrl }, () => {\n      this.dofileDownload.click();\n      URL.revokeObjectURL(this.state.fileDownloadUrl);\n      this.setState({ fileDownloadUrl: \"\" });\n    });\n  };\n\n  handleGetQuest = () => {\n    if (this.state.url === \"\" || this.state.quest === \"\") {\n      alert(!this.state.url ? \"Select a city!\" : \"Select a quest type!\");\n    } else {\n      fetchQuest(this.state.url, this.state.quest).then((res) => {\n        this.downloadFile(res);\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"quest-select-container\">\n        <select name=\"city-name\" className=\"select-quest city\">\n          <option value=\"\" hidden>\n            City\n          </option>\n          {urls.map((i) => {\n            return (\n              <option\n                className=\"option-url\"\n                value={i.url}\n                onClick={(e) => {\n                  this.setState({ url: e.target.value });\n                }}\n                key={urls.indexOf(i)}\n              >\n                {i.name}\n              </option>\n            );\n          })}\n        </select>\n        <select name=\"quest-url\" className=\"select-quest quest\">\n          <option value=\"\" hidden>\n            Quest\n          </option>\n          {rewards.map((i) => {\n            return (\n              <optgroup label={i.category} key={rewards.indexOf(i)}>\n                {i.rewards.map((j) => {\n                  return (\n                    <option\n                      value={j.literal}\n                      onClick={(e) => this.setState({ quest: j.literal })}\n                      key={i.rewards.indexOf(j)}\n                    >\n                      {j.reward}\n                    </option>\n                  );\n                })}\n              </optgroup>\n            );\n          })}\n        </select>\n        <button className=\"button-quest\" onClick={(e) => this.handleGetQuest()}>\n          Get quests\n        </button>\n        <a\n          style={{ display: \"none\" }}\n          download={\"test.gpx\"}\n          href={this.state.fileDownloadUrl}\n          ref={(e) => (this.dofileDownload = e)}\n        >\n          download it\n        </a>\n      </div>\n    );\n  }\n}\n\nclass ConvertToGpx extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputText: \"\", fileDownloadUrl: \"\" };\n\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n  createGpx(temp = this.parseCoords(this.state.inputText)) {\n    let stringFile = \"\";\n    stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n';\n    stringFile += \"<gpx>\\n\";\n    stringFile += \"<trk>\\n\";\n    stringFile += \"<trkseg>\\n\";\n\n    temp.forEach((i) => {\n      let [lat, lon] = i[0].split(\",\");\n\n      stringFile += `<trkpt lat=\"${parseFloat(lat)}\" lon=\"${parseFloat(\n        lon\n      )}\"></trkpt>\\n`;\n    });\n\n    stringFile += `</trkseg>\\n`;\n    stringFile += `</trk>\\n`;\n    stringFile += `</gpx>\\n`;\n    return stringFile;\n  }\n\n  downloadFile() {\n    const blob = new Blob([this.createGpx(this.state.inputText)]); // Step 3\n    const fileDownloadUrl = URL.createObjectURL(blob); // Step 4\n    this.setState(\n      { fileDownloadUrl: fileDownloadUrl }, // Step 5\n      () => {\n        this.dofileDownload.click(); // Step 6\n        URL.revokeObjectURL(fileDownloadUrl); // Step 7\n        this.setState({ fileDownloadUrl: \"\" });\n      }\n    );\n  }\n\n  parseCoords() {\n    const coordRegex = /[0-9]{1,3}\\.[0-9]{3,14},.[0-9]{0,3}\\.[0-9]{3,14}/g;\n    const text = this.state.inputText;\n    return [...text.matchAll(coordRegex)];\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n\n    this.downloadFile();\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={(e) => this.handleFormSubmit(e)} className=\"gpx-form\">\n          <input\n            type=\"text\"\n            value={this.state.inputText}\n            onChange={(e) => {\n              this.setState({ inputText: e.target.value });\n            }}\n          />\n          <input type=\"submit\" value=\"Get .gpx file\" className=\"gpx-submit\" />\n        </form>\n        <a\n          style={{ display: \"none\" }}\n          download={\"test.gpx\"}\n          href={this.state.fileDownloadUrl}\n          ref={(e) => (this.dofileDownload = e)}\n        >\n          download it\n        </a>\n      </>\n    );\n  }\n}\n// component\nexport default function App() {\n  /* Functions */\n  // const copyToClipboard = (text) => {\n  //   let textField = document.createElement('textarea')\n  //   textField.innerText = text\n  //   document.body.appendChild(textField)\n  //   textField.select()\n  //   document.execCommand('copy')\n  //   textField.remove()\n  // }\n\n  return (\n    <>\n      <ConvertToGpx />\n      <GetQuest />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}