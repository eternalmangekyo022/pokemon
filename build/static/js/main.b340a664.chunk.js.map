{"version":3,"sources":["App.jsx","index.js"],"names":["dusts","distance","coord1","coord2","a","unit","split","lat1","lon1","lat2","lon2","parseFloat","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","fetchNoCors","url","fetch","encodeURIComponent","res","json","data","quests","invasions","console","error","sortCoords","pop","list","index","popped","temp","length","i","Error","log","done","filter","coord","chose","obj","lat","lng","at","elemDist","indexOf","questCreateGpx","coords","stringFile","forEach","GetQuest","props","handleGetQuest","state","quest","alert","final","includes","conditions_string","fileDownload","Blob","fileDownloadUrl","handleSelectCity","bind","handleSelectQuest","e","debug","target","value","this","setState","className","name","onChange","hidden","uuidv4","urls","map","domain","style","fontFamily","rewards","label","category","j","literal","reward","onClick","React","Component","GetTimeZones","date","Date","setInterval","forceUpdate","toLocaleString","timeZone","time_zone","hour12","GetGrunts","city","character_id","grunts","handleSubmit","fetchGrunts","character","toString","id","onSubmit","grunt_type","ConvertToGpx","inputText","handleFormSubmit","parseCoords","lon","text","matchAll","preventDefault","downloadFile","type","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b340a664.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { rewards, urls, grunts } from \"./bundle.json\";\nimport fileDownload from \"js-file-download\";\nimport { v4 as uuidv4 } from 'uuid';\n\nlet dusts = [\"Make 3 Great Throws in a row\", \"Make 2 Nice Curveball Throws in a row\", \"Make 5 Nice Throws\", \"Make 3 Great Throws\", \"Make 3 Nice Throws in a row\", \"Make an Excellent Throw\", \"\"]\n\nasync function distance(coord1, coord2, unit = \"K\") {\n  let [lat1, lon1] = coord1.split(\",\");\n  let [lat2, lon2] = coord2.split(\",\");\n  lat1 = parseFloat(lat1);\n  lon1 = parseFloat(lon1);\n  lat2 = parseFloat(lat2);\n  lon2 = parseFloat(lon2);\n\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  } else {\n    var radlat1 = (Math.PI * lat1) / 180;\n    var radlat2 = (Math.PI * lat2) / 180;\n    var theta = lon1 - lon2;\n    var radtheta = (Math.PI * theta) / 180;\n    var dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    if (unit === \"K\") {\n      dist = dist * 1.609344;\n    }\n    if (unit === \"N\") {\n      dist = dist * 0.8684;\n    }\n    return dist;\n  }\n}\nasync function fetchNoCors(url) {\n  try {\n    // https://pokemon-api-327709.appspot.com/\n    // localhost:2000/\n\n    let res = await fetch(\n      `https://pokemon-api-327709.appspot.com/${encodeURIComponent(url)}`\n    );\n    // console.log(`https://pokemon-api-327709.appspot.com/${encodeURIComponent(url)}`);\n    res = await res.json();\n    return res.data.quests || res.data.invasions;\n  } catch (err) {\n    console.error(err + \" fetchQuest()\");\n  }\n}\n\nasync function sortCoords(quests) {\n  function pop(list, index) {\n    let temp = [];\n    let popped;\n    if (index === -1) {\n      index = list.length - 1;\n    }\n\n    for (let i = 0; i < list.length; i++) {\n      if (i !== index) {\n        temp = [...temp, list[i]];\n      } else {\n        popped = list[i];\n      }\n    }\n    if (!popped)\n      throw new Error(\n        `index not valid. sortCoords.pop() actual length: ${quests.length}, index given: ${index}`\n      );\n    return [temp, popped];\n  }\n\n  if (quests.length === 0) {\n    console.error(\"No quests specified, quest list empty. sortCoords()\")\n    console.log(quests)\n    return quests\n  };\n\n  let done = [];\n  let popped;\n\n  [quests, popped] = pop(quests, 0);\n  done[0] = popped;\n\n  quests = quests.filter((i) => i !== popped);\n\n  let coord = [];\n\n  while (quests.length > 0) {\n    let temp = [{ chose: null }];\n    let dist = 1000000000;\n    let obj = null;\n    for (let i of quests) {\n      let elemDist = await distance(\n        i.lat + \",\" + i.lng,\n        done.at(-1).lat + \",\" + done.at(-1).lng\n      );\n      temp = [...temp, elemDist];\n\n      if (elemDist < dist) {\n        temp[0].chose = elemDist;\n        dist = elemDist;\n        obj = i;\n      }\n    }\n    coord = [...coord, temp];\n\n    [quests, popped] = pop(quests, quests.indexOf(obj));\n    done = [...done, popped];\n  }\n  return done;\n}\n\nfunction questCreateGpx(coords) {\n  let stringFile = \"\";\n  stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n';\n  stringFile += \"<gpx>\\n\";\n  stringFile += \"<trk>\\n\";\n  stringFile += \"<trkseg>\\n\";\n\n  coords.forEach((i) => {\n    stringFile += `<trkpt lat=\"${parseFloat(i.lat)}\" lon=\"${parseFloat(\n      i.lng\n    )}\"></trkpt>\\n`;\n  });\n\n  stringFile += `</trkseg>\\n`;\n  stringFile += `</trk>\\n`;\n  stringFile += `</gpx>\\n`;\n  return stringFile;\n}\n\n// fetch(\"https://cors-anywhere.herokuapp.com/https://nycpokemap.com/quests.php\", { \"x-requested-with\": \"fetch\" })\n// components\nclass GetQuest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      url: \"\",\n      quest: \"\",\n      fileDownloadUrl: \"\",\n    };\n\n    this.handleSelectCity = this.handleSelectCity.bind(this);\n    this.handleSelectQuest = this.handleSelectQuest.bind(this);\n  }\n\n\n  handleGetQuest = async() => {\n    try {\n      if (this.state.url === \"\" || this.state.quest === \"\") {\n        alert(!this.state.url ? \"Select a city!\" : \"Select a quest type!\");\n      } else {\n        let res = await fetchNoCors(this.state.url + \"/quests.php?\" + this.state.quest)\n        let final = res;\n        if (\n          [\n            \"quests[]=12%2C0%2C3\",\n            \"quests[]=12%2C0%2C6\",\n            \"quests[]=12%2C0%2C9\",\n            \"quests[]=12%2C0%2C15\",\n            \"quests[]=12%2C0%2C18\",\n          ].includes(this.state.quest)\n        ) {\n  \n          final = final.filter(\n            i => i.conditions_string === \"Power up Pokémon 5 times\"\n          );\n        } else if(this.state.quest === \"quests[]=3%2C200%2C0&quests[]=3%2C500%2C0&quests[]=3%2C1000%2C0&quests[]=3%2C1500%2C0\") {\n          final = final.filter(\n            i => dusts.includes(i.conditions_string)\n          )\n        } else if(this.state.quest === \"quests[]=12%2C0%2C80\") {\n          final = final.filter(\n            i => i.conditions_string === \"Use 10 supereffective Charged Attacks\"\n          );\n        } else if(this.state.quest === \"quests[]=12%2C0%2C94\") {\n          final = final.filter(\n            i => i.conditions_string === \"Use 10 supereffective Charged Attacks\"\n          )\n        }\n          \n          fileDownload(new Blob([questCreateGpx(final)]), \"quest.gpx\");\n  \n\n    }  \n    } catch(err) {\n      console.error(`An error occurred. \"${ err }\". handleGetQuest()`)\n    }\n  };\n\n  handleSelectCity(e, debug=false) {\n    if (debug) {\n      alert(`Selected ${e.target.value}`);\n    }\n\n    this.setState({ url: e.target.value });\n  }\n\n  handleSelectQuest(e, debug=false) {\n    if (debug) {\n      alert(`Selected ${e.target.value}`);\n    }\n\n    this.setState({ quest: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"quest-select-container\" key={uuidv4()}>\n        {/* Select city */}\n        <select\n          name=\"city-name\"\n          className=\"select-quest city\"\n          value={this.state.url}\n          onChange={this.handleSelectCity}\n          key={uuidv4()}\n        >\n          <option value=\"\" hidden key={uuidv4()}>\n            🏙City🏙\n          </option>\n          {urls.map((i) => {\n            return (\n              <>\n                <option\n                  className=\"option-url\"\n                  value={i.domain}\n                  key={uuidv4()}\n                  style={{ fontFamily: \"sans-serif\" }}\n                >\n                  {i.name}\n                </option>\n              </>\n            );\n          })}\n        </select>\n\n        {/* Select quest */}\n        <select\n          key={uuidv4()}\n          name=\"quest-url\"\n          className=\"select-quest quest\"\n          value={this.state.quest}\n          onChange={this.handleSelectQuest}\n        >\n          <option value=\"\" hidden key={uuidv4()}>\n            🗺️Quest🗺️\n          </option>\n          {rewards.map((i) => {\n            return (\n              <optgroup label={i.category} key={uuidv4()}>\n                {i.rewards.map((j) => {\n                  return (\n                    <option\n                      value={j.literal}\n                      key={uuidv4()}\n                      style={{ fontFamily: \"sans-serif\" }}\n                    >\n                      {j.reward}\n                    </option>\n                  );\n                })}\n              </optgroup>\n            );\n          })}\n        </select>\n        <button className=\"button-quest\" onClick={ this.handleGetQuest } key={uuidv4()}>\n          Get quest.gpx\n        </button>\n      </div>\n    );\n  }\n}\n\nclass GetTimeZones extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.date = new Date()\n  }\n\n  componentDidMount() {\n    console.log(\"Mounted, started displaying current time\")\n    setInterval(() => {\n      this.forceUpdate()\n    \n    }, 1000)\n  }\n\n\n\n  render() {\n    return(\n    <>\n      <div className={\"timezones\"}>\n        { urls.map(i => {\n          let date = new Date()\n          return (\n            <p key={uuidv4()}>{ `${i.name} ${date.toLocaleString(\"en-CA\", { timeZone: i.time_zone, hour12: true })}` }</p>\n        \n          )\n        \n            }) }\n      </div>\n    </>\n    )\n  }\n}\n\nclass GetGrunts extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { city: urls[0].domain, character_id: grunts[0].character_id }\n    \n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  async fetchGrunts() {\n    try {\n      const url = \"\" + this.state.city + \"/pokestop.php\"\n      let res = await fetchNoCors(url)\n\n      return res\n    } catch(err) {\n      console.log(`Error occurred. \"${ err } fethGrunts()\"`)\n    }\n\n\n  }\n\n\n  async handleSubmit() {\n    try {\n      let res = await this.fetchGrunts()\n      res = res.filter(i => i.character.toString() === this.state.character_id.toString())\n  \n      res = questCreateGpx(await sortCoords(res))\n  \n      fileDownload(new Blob([res]), \"grunts.gpx\")\n    } catch(err) {\n      console.error(`Error occurred. \"${ err }\". handleSubmit()`)\n    }\n  }\n  \n  render() {\n    return(\n      <>\n      <select name=\"grunt-select-city\" id=\"grunt-select-city\" onChange={ e => this.setState({ city: e.target.value })  }>\n        { urls.map(i => {\n          return(\n            <option value={ i.domain } key={ uuidv4() } >{ i.name }</option>\n          )\n        }) }\n      </select>\n      <select name=\"grunt-select-type\" id=\"grunt-select-type\" onSubmit={ e => this.setState({ character_id: e.target.value }) }>\n        { grunts.map(i => {\n          return(\n            <option value={ i.character_id } key={ uuidv4() }>{ i.grunt_type }</option>\n          )\n        }) }\n\n\n      </select>\n      <button\n        onClick={ this.handleSubmit }\n      >\n        Get grunt.gpx\n\n      </button>\n      </>\n    )\n\n\n  }\n\n\n\n}\n\n\n\nclass ConvertToGpx extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputText: \"\", fileDownloadUrl: \"\" };\n\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n  createGpx(temp = this.parseCoords(this.state.inputText)) {\n    let stringFile = \"\";\n    stringFile += '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\\n';\n    stringFile += \"<gpx>\\n\";\n    stringFile += \"<trk>\\n\";\n    stringFile += \"<trkseg>\\n\";\n\n    temp.forEach((i) => {\n      let [lat, lon] = i[0].split(\",\");\n\n      stringFile += `<trkpt lat=\"${parseFloat(lat)}\" lon=\"${parseFloat(\n        lon\n      )}\"></trkpt>\\n`;\n    });\n\n    stringFile += `</trkseg>\\n`;\n    stringFile += `</trk>\\n`;\n    stringFile += `</gpx>\\n`;\n    return stringFile;\n  }\n\n  parseCoords() {\n    const coordRegex = /[0-9]{1,3}\\.[0-9]{3,14},.[0-9]{0,3}\\.[0-9]{3,14}/g;\n    const text = this.state.inputText;\n    return [...text.matchAll(coordRegex)];\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n\n    this.downloadFile();\n  }\n\n  render() {\n    return (\n      <>\n        <form onSubmit={(e) => this.handleFormSubmit(e)} className=\"gpx-form\">\n          <input\n            type=\"text\"\n            value={this.state.inputText}\n            onChange={(e) => {\n              this.setState({ inputText: e.target.value });\n            }}\n          />\n          <input type=\"submit\" value=\"Get .gpx file\" className=\"gpx-submit\" />\n        </form>\n      </>\n    );\n  }\n}\n// component\n\nexport default function App() {\n  /* Functions */\n  // const copyToClipboard = (text) => {\n  //   let textField = document.createElement('textarea')\n  //   textField.innerText = text\n  //   document.body.appendChild(textField)\n  //   textField.select()\n  //   document.execCommand('copy')\n  //   textField.remove()\n  // }\n\n  return (\n    <>\n      <ConvertToGpx />\n      <GetQuest />\n      <GetTimeZones />\n      <GetGrunts />\n\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}